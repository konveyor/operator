---
- name: "Load cluster API groups"
  set_fact:
    api_groups: "{{ lookup('k8s', cluster_info='api_groups') }}"

- name: "Transfer rwx_storage_class setting if hub_bucket_storage_class is not defined"
  set_fact:
    hub_bucket_storage_class: "{{ rwx_storage_class }}"
  when: rwx_storage_class is defined and hub_bucket_storage_class is not defined

- name: "Transfer rwx_storage_class setting if cache_storage_class is not defined"
  set_fact:
    cache_storage_class: "{{ rwx_storage_class }}"
  when: rwx_storage_class is defined and cache_storage_class is not defined

- name: "Transfer maven_data_volume_size setting"
  set_fact:
    cache_data_volume_size: "{{ maven_data_volume_size }}"
  when: maven_data_volume_size is defined and hostvars[inventory_hostname]['cache_data_volume_size'] is not defined

- name: "Enable OpenShift cluster environment"
  set_fact:
    openshift_cluster: true
  when: "'route.openshift.io' in api_groups"

- when: openshift_cluster|bool
  block:
    - name: "Get OpenShift cluster Proxy object"
      set_fact:
        proxy_cluster: "{{ lookup('k8s', api_version='config.openshift.io/v1', kind='Proxy', resource_name='cluster') }}"

    - when: (proxy_cluster.spec.trustedCA.name | length) > 0
      block:
        - name: "Enable trusted CA environment"
          set_fact:
            trusted_ca_enabled: true

        - name: "Create an empty ConfigMap that will hold the trusted CA"
          k8s:
            state: present
            definition: "{{ lookup('template', 'configmap-trusted-ca.yml.j2') }}"

- when:
    - feature_auth_required|bool
    - feature_auth_type == "oauth"
  block:
    - name: "Check if Cookie Secret already exists"
      k8s_info:
        api_version: v1
        kind: Secret
        name: cookie-secret
        namespace: "{{ app_namespace }}"
      register: cookie_secret

    - name: "Generate Cookie Secret"
      set_fact:
        new_cookie_secret: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=32') }}"
      when: (cookie_secret.resources | length) == 0

    - name: "Create Cookie Secret"
      k8s:
        state: present
        definition: "{{ lookup('template', 'secret-cookie-secret.yml.j2') }}"
      when: (cookie_secret.resources | length) == 0

    - name: "Retrieve Cookie Secret"
      k8s_info:
        api_version: v1
        kind: Secret
        name: cookie-secret
        namespace: "{{ app_namespace }}"
      register: cookie_secret

    - name: "Set Cookie Secret"
      set_fact:
        cookie_secret_data: "{{ cookie_secret.resources[0].data['cookie-secret'] | b64decode }}"

    - name: "Retrieve Oauth Client Secret if it exists"
      k8s_info:
        api_version: v1
        kind: Secret
        name: oauth-client-secret
        namespace: "{{ app_namespace }}"
      register: oauth_client_secret_status

    - name: "Set Oauth Client Secret"
      set_fact:
        oauth_client_secret: "{{ oauth_client_secret_status.resources[0].data['client-secret'] | b64decode }}"
      when: (oauth_client_secret_status.resources | length) > 0

- when:
    - feature_auth_required|bool
    - feature_auth_type == "keycloak"
  block:
    - name: "Setup Keycloak PostgreSQL PersistentVolumeClaim"
      k8s:
        state: present
        definition: "{{ lookup('template', 'persistentvolumeclaim-keycloak-postgresql.yml.j2') }}"

    - name: "Check if Keycloak PostgreSQL Secret exists already so we don't update it"
      k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ keycloak_database_secret_name }}"
        namespace: "{{ app_namespace }}"
      register: keycloak_database_secret_status

    - when: (keycloak_database_secret_status.resources | length) == 0
      block:
        - name: "Generate random values for Keycloak PostgreSQL credentials"
          set_fact:
            keycloak_database_db_username: "user-{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=4') }}"
            keycloak_database_db_password: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=16') }}"

        - name: "Encode Keycloak PostgreSQL credentials"
          set_fact:
            keycloak_database_db_username_b64: "{{ keycloak_database_db_username | b64encode }}"
            keycloak_database_db_password_b64: "{{ keycloak_database_db_password | b64encode }}"

        - name: "Setup Keycloak PostgreSQL Secret"
          k8s:
            state: present
            definition: "{{ lookup('template', 'secret-keycloak-postgresql.yml.j2') }}"

    - name: "Delete old Keycloak PostgreSQL Service"
      k8s:
        state: absent
        kind: Service
        api_version: v1
        name: "{{ keycloak_database_service_name }}"
        namespace: "{{ app_namespace }}"

    - name: "Setup Keycloak PostgreSQL Deployment"
      k8s:
        state: present
        definition: "{{ lookup('template', 'deployment-keycloak-postgresql.yml.j2') }}"

    - name: "Check status of Keycloak PostgreSQL"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ app_namespace }}"
        label_selectors:
          - app.kubernetes.io/name = {{ keycloak_database_service_name }}
        wait: true
        wait_condition:
          type: "Ready"
          status: "True"
        wait_timeout: 240

    - name: "Check for old postgresql version deployment"
      k8s_info:
        api_version: v1
        kind: Deployment
        name: "{{ keycloak_database_service_name }}"
        namespace: "{{ app_namespace }}"
      register: pgsql_old_deployment

    - when: ( pgsql_old_deployment.resources | length ) > 0
      block:
        - name: Set up the temporary migration service
          k8s:
            state: present
            definition: "{{ lookup('template', 'service-keycloak-postgresql-migration.yml.j2') }}"

        - name: "Get the keycloak DB secret"
          k8s_info:
            api_version: v1
            kind: Secret
            name: "tackle-keycloak-postgresql"
            namespace: "konveyor-tackle"
          register: pgsql_secret

        - name: "Set the keycloak DB credentials"
          set_fact:
            dbm_user: "{{ pgsql_secret.resources[0].data['database-user'] | b64decode }}"
            dbm_pass: "{{ pgsql_secret.resources[0].data['database-password'] | b64decode }}"

        - name: "Generate DB URLs"
          set_fact:
            dbm_src: postgresql://{{ dbm_user }}:{{ dbm_pass }}@{{ keycloak_database_service_k8s_resource_name }}/{{ keycloak_database_db_name }}
            dbm_dst: postgresql://{{ dbm_user }}:{{ dbm_pass }}@{{ keycloak_database_service_k8s_resource_name }}-migration/{{ keycloak_database_db_name }}

        - name: "Perform the DB upgrade"
          shell: |
                 set -o pipefail
                 sleep 10 # give the service a few seconds to be available
                 pg_dump {{ dbm_src }} | psql {{ dbm_dst }}
          changed_when: false

        - name: "Remove the temporary migration service"
          k8s:
            state: absent
            definition: "{{ lookup('template', 'service-keycloak-postgresql-migration.yml.j2') }}"

        - name: "Remove the old deployment"
          k8s:
            state: absent
            api_version: v1
            kind: Deployment
            name: "{{ keycloak_database_service_name }}"
            namespace: "{{ app_namespace }}"

        - name: "Remove the service so it can be recreated"
          k8s:
            state: absent
            definition: "{{ lookup('template', 'service-keycloak-postgresql.yml.j2') }}"

    - name: "Setup Keycloak PostgreSQL Service"
      k8s:
        state: present
        definition: "{{ lookup('template', 'service-keycloak-postgresql.yml.j2') }}"

    - name: "Check if Keycloak SSO Secret exists already so we don't update it"
      k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ keycloak_sso_secret_name }}"
        namespace: "{{ app_namespace }}"
      register: keycloak_sso_secret_status

    - when: (keycloak_sso_secret_status.resources | length) == 0
      block:
        - name: "Generate random values for Keycloak SSO credentials"
          set_fact:
            keycloak_sso_admin_password: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=16') }}"

        - name: "Encode Keycloak SSO credentials"
          set_fact:
            keycloak_sso_admin_password_b64: "{{ keycloak_sso_admin_password | b64encode }}"

        - name: "Setup Keycloak SSO Secret"
          k8s:
            state: present
            definition: "{{ lookup('template', 'secret-keycloak-sso.yml.j2') }}"

    - when:
        - app_profile == "konveyor"
      block:
        - name: "Setup Keycloak SSO Service"
          k8s:
            state: present
            definition: "{{ lookup('template', 'service-keycloak-sso.yml.j2') }}"

        - name: "Setup Keycloak SSO Deployment"
          k8s:
            state: present
            definition: "{{ lookup('template', 'deployment-keycloak-sso.yml.j2') }}"

- when:
    - feature_auth_required|bool
    - feature_auth_type == "keycloak"
    - app_profile == "mta"
  block:
    - name: "Check for existing RHSSO Keycloak CR"
      k8s_info:
        api_version: "{{ rhsso_api_version }}"
        kind: Keycloak
        namespace: "{{ app_namespace }}"
        label_selectors:
          - app = {{ rhsso_service_name }}
      register: rhsso_keycloak

    - name: "Delete old RHSSO Keycloak"
      k8s:
        state: absent
        api_version: "{{ rhsso_api_version }}"
        kind: Keycloak
        name: "{{ rhsso_service_name }}"
        namespace: "{{ app_namespace }}"
      when:
        - rhsso_keycloak.resources | length > 0
        - rhsso_keycloak.resources[0].status.secondaryResources.Deployment is defined
        - '"keycloak-postgresql" in rhsso_keycloak.resources[0].status.secondaryResources.Deployment'

    - name: "Get PostgreSQL Keycloak Secret"
      k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ keycloak_database_secret_name }}"
        namespace: "{{ app_namespace }}"
      register: keycloak_database_secret

    - name: "Get DNS operator CR"
      k8s_info:
        api_version: operator.openshift.io/v1
        kind: DNS
        name: default
      register: default_dns_operator

    - name: "Collect service name components"
      set_fact:
        pgsql_svc_fqdn_parts:
          - "{{ keycloak_database_service_k8s_resource_name }}"
          - "{{ app_namespace }}"
          - "svc"
          - "{{ default_dns_operator.resources[0].status.clusterDomain }}"

    - name: "Assemble service name"
      set_fact:
        pgsql_svc_fqdn: "{{ pgsql_svc_fqdn_parts | join('.') }}"

    - name: "Collect database coordinates"
      set_fact:
        rhsso_db_pass_b64: "{{ keycloak_database_secret.resources[0].data['database-password'] }}"
        rhsso_db_user_b64: "{{ keycloak_database_secret.resources[0].data['database-user'] }}"
        rhsso_db_host_b64: "{{ pgsql_svc_fqdn | b64encode }}"
        rhsso_db_name_b64: "{{ keycloak_database_secret.resources[0].data['database-name'] }}"

    - name: "Setup Keycloak SSO Deployment"
      k8s:
        state: present
        definition: "{{ lookup('template', 'secret-keycloak-db.yml.j2') }}"
        merge_type: merge

    - name: "Create RHSSO Keycloak CR"
      k8s:
        state: present
        definition: "{{ lookup('template', 'customresource-rhsso-keycloak.yml.j2') }}"

    - name: "Check RHSSO for readiness"
      k8s_info:
        api_version: "{{ rhsso_api_version }}"
        kind: Keycloak
        namespace: "{{ app_namespace }}"
        label_selectors:
          - app = {{ rhsso_service_name }}
      register: cr
      until: true in (cr | json_query('resources[].status.ready'))
      retries: 30
      delay: 5

- name: "Setup Hub API Database PersistentVolumeClaim"
  k8s:
    state: present
    definition: "{{ lookup('template', 'persistentvolumeclaim-hub-database.yml.j2') }}"

- name: "Retrieve the Hub API Bucket if it already exists"
  k8s_info:
    api_version: v1
    kind: PersistentVolumeClaim
    name: "{{ hub_bucket_volume_claim_name }}"
    namespace: "{{ app_namespace }}"
  register: hub_bucket

- name: "Update the Hub Bucket Access Mode to reflect its current state"
  when: hub_bucket.resources | length > 0
  set_fact:
    hub_bucket_volume_claim_mode: "{{ (hub_bucket.resources | first).spec.accessModes | first }}"

- name: "Setup Hub API Bucket PersistentVolumeClaim"
  k8s:
    state: present
    definition: "{{ lookup('template', 'persistentvolumeclaim-hub-bucket.yml.j2') }}"

- name: "Check if Hub Secret exists already so we don't update it"
  k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ hub_secret_name }}"
    namespace: "{{ app_namespace }}"
  register: hub_secret_status

- when: (hub_secret_status.resources | length) == 0
  block:
    - name: "Generate Hub random AES passphrase"
      set_fact:
        hub_aes_passphrase: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=32') }}"

    - name: "Encode Hub AES passphrase"
      set_fact:
        hub_aes_passphrase_b64: "{{ hub_aes_passphrase | b64encode }}"

    - name: "Generate Hub addon token"
      set_fact:
        hub_addon_token: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=32') }}"

    - name: "Encode Hub addon token"
      set_fact:
        hub_addon_token_b64: "{{ hub_addon_token | b64encode }}"

    - name: "Setup Hub Secret"
      k8s:
        state: present
        definition: "{{ lookup('template', 'secret-hub.yml.j2') }}"

- name: "Look up Keycloak DB Secret for Hashing"
  set_fact:
    keycloak_db_secret:
      env: "{{ lookup('template', 'secret-keycloak-db.yml.j2') | from_yaml }}"
  when:
    - feature_auth_required|bool
    - app_profile == "mta"

- name: "Setup Hub API Service"
  k8s:
    state: present
    definition: "{{ lookup('template', 'service-hub.yml.j2') }}"

- name: "Setup Hub API Deployment"
  k8s:
    state: present
    definition: "{{ lookup('template', 'deployment-hub.yml.j2') }}"
    merge_type: merge

- name: "Setup UI ServiceAccount"
  k8s:
    state: present
    definition: "{{ lookup('template', 'serviceaccount-ui.yml.j2') }}"

- name: "Setup UI Service"
  k8s:
    state: present
    definition: "{{ lookup('template', 'service-ui.yml.j2') }}"

- name: "Setup UI Deployment"
  k8s:
    state: present
    definition: "{{ lookup('template', 'deployment-ui.yml.j2') }}"
    merge_type: merge

- name: "Set UI Ingress"
  set_fact:
    ui_ingress_state: "{{ 'absent' if ui_ingress_class_name == 'none' else 'present' }}"

- name: "Setup UI Ingress"
  k8s:
    state: "{{ ui_ingress_state }}"
    definition: "{{ lookup('template', 'ingress-ui.yml.j2') }}"
    merge_type: merge
  when: not openshift_cluster|bool

- name: "Setup UI Route"
  k8s:
    state: present
    definition: "{{ lookup('template', 'route-ui.yml.j2') }}"
  when: openshift_cluster|bool

- name: "Setup Cache PersistentVolumeClaim"
  k8s:
    state: present
    definition: "{{ lookup('template', 'persistentvolumeclaim-cache.yml.j2') }}"
  when: (rwx_supported | bool)

- name: "Remove Maven PersistentVolumeClaim"
  k8s:
    state: absent
    kind: PersistentVolumeClaim
    api_version: v1
    name: "{{ app_name }}-maven-volume-claim"
    namespace: "{{ app_namespace }}"

- name: "Remove Admin Addon CR"
  k8s:
    state: absent
    kind: Addon
    api_version: tackle.konveyor.io/v1alpha2
    name: "{{ admin_name }}"
    namespace: "{{ app_namespace }}"

- name: "Create Windup Addon CR"
  k8s:
    state: present
    definition: "{{ lookup('template', 'customresource-addon-analyzer.yml.j2') }}"

- name: "Create Language Discovery Addon CR"
  k8s:
    state: present
    definition: "{{ lookup('template', 'customresource-addon-language-discovery.yml.j2') }}"

- name: "Create Tech Discovery Addon CR"
  k8s:
    state: present
    definition: "{{ lookup('template', 'customresource-addon-tech-discovery.yml.j2') }}"

- name: "Create Network Policy"
  k8s:
    state: present
    definition: "{{ lookup('template', 'networkpolicy.yml.j2') }}"
  when: feature_isolate_namespace|bool

- when:
    - not(feature_auth_required|bool) or not(feature_auth_type == "keycloak")
  block:
    - name: Gather available apis
      kubernetes.core.k8s_cluster_info:
      register: cluster_info

    - name: "Deprovision RHSSO Keycloak CR"
      k8s:
        state: absent
        kind: Keycloak
        api_version: "{{ rhsso_api_version }}"
        name: "{{ rhsso_service_name }}"
        namespace: "{{ app_namespace }}"
      when:
        - rhsso_api_version in cluster_info.apis
        - '"Keycloak" in cluster_info.apis[rhsso_api_version]'

    - name: "Deprovision RHSSO Keycloak Deployment"
      k8s:
        state: absent
        kind: Deployment
        api_version: apps/v1
        name: "{{ keycloak_database_deployment_name }}"
        namespace: "{{ app_namespace }}"

    - name: "Deprovision RHSSO Keycloak Postgres"
      k8s:
        state: absent
        kind: Deployment
        api_version: apps/v1
        name: "{{ keycloak_sso_deployment_name }}"
        namespace: "{{ app_namespace }}"

- name: "Create Hub ServiceMonitor"
  k8s:
    state: present
    definition: "{{ lookup('template', 'servicemonitor-hub.yml.j2') }}"
  when:
    - hub_metrics_enabled|bool
    - openshift_cluster|bool

- name: "Check if pathfinder exists"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ app_namespace }}"
    label_selectors:
      - app.kubernetes.io/name = {{ app_name }}-{{ pathfinder_component_name }}
  register: pathfinder_pod

- when:
    - (pathfinder_pod.resources | length) > 0
  block:
    - name: "Wait for Pathfinder to be Ready"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ app_namespace }}"
        label_selectors:
          - app.kubernetes.io/name = {{ app_name }}-{{ pathfinder_component_name }}
        wait: true
        wait_condition:
          type: "Ready"
          status: "True"
        wait_timeout: 240

    - name: "Wait for the Hub to be Ready"
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ app_namespace }}"
        label_selectors:
          - app.kubernetes.io/name = {{ app_name }}-{{ hub_component_name }}
        wait: true
        wait_condition:
          type: "Ready"
          status: "True"
        wait_timeout: 240

    - name: Retrieve Hub Secret
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ hub_secret_name }}"
        namespace: "{{ app_namespace }}"
      register: hub_secret

    - name: Set Hub key
      set_fact:
        hub_key: "{{ hub_secret.resources[0].data.addon_token | b64decode }}"

    - name: Migrate assessments
      shell: |
        /usr/local/bin/migrate-pathfinder-assessments.py \
        -p http://{{ pathfinder_service_name }}:8080/pathfinder \
        -b http://{{ hub_service_name }}:8080 \
        -t $(/usr/local/bin/jwt.sh {{ hub_key }})
      changed_when: false

    - name: "Remove Pathfinder PostgreSQL Secret"
      k8s:
        state: absent
        api_version: v1
        kind: Secret
        name: "{{ pathfinder_database_secret_name }}"
        namespace: "{{ app_namespace }}"

    - name: "Remove Pathfinder PostgreSQL Service"
      k8s:
        state: absent
        api_version: v1
        kind: Service
        name: "{{ pathfinder_database_service_name }}"
        namespace: "{{ app_namespace }}"

    - name: "Remove Pathfinder PostgreSQL Deployment"
      k8s:
        state: absent
        api_version: apps/v1
        kind: Deployment
        name: "{{ pathfinder_database_deployment_name }}"
        namespace: "{{ app_namespace }}"

    - name: "Remove Pathfinder Service"
      k8s:
        state: absent
        api_version: v1
        kind: Service
        name: "{{ pathfinder_service_name }}"
        namespace: "{{ app_namespace }}"

    - name: "Remove Pathfinder Deployment"
      k8s:
        state: absent
        api_version: apps/v1
        kind: Deployment
        name: "{{ pathfinder_deployment_name }}"
        namespace: "{{ app_namespace }}"

- name: "Remove Pathfinder PostgreSQL Volume"
  k8s:
    state: absent
    api_version: v1
    kind: PersistentVolumeClaim
    name: "{{ pathfinder_database_data_volume_claim_name }}"
    namespace: "{{ app_namespace }}"
  when:
    - (pathfinder_delete_db_volume|bool)
    - (pathfinder_pod.resources|length) == 0
