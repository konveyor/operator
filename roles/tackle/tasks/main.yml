---
- block:

  - name: "Set UI feature state"
    set_fact:
      ui_state: "present"
    when: feature_ui_enabled|bool

  - name: "Load cluster API groups"
    set_fact:
      api_groups: "{{ lookup('k8s', cluster_info='api_groups') }}"

  - when: "'route.openshift.io' in api_groups"
    block:
      - name: "Enable OpenShift cluster environment"
        set_fact:
          openshift_cluster: true

      - name: "Obtain k8s cluster version"
        set_fact:
          k8s_cluster_version: "{{ lookup('k8s', cluster_info='version').kubernetes.gitVersion }}"

  - name: "Setup the webhook secret"
    k8s:
      state: present
      definition: "{{ lookup('template', 'secret-webhook-server-secret.yml.j2') }}"

  - when:
      - feature_auth_enabled|bool
      - feature_auth_provider == "keycloak"
    block:
      - name: "Setup Keycloak PostgreSQL PersistentVolumeClaim"
        k8s:
          state: present
          definition: "{{ lookup('template', 'persistentvolumeclaim-keycloak-postgresql.yml.j2') }}"

      - name: "Check if Keycloak PostgreSQL Secret exists already so we don't update it"
        k8s_info:
          api_version: v1
          kind: Secret
          name: "{{ keycloak_database_secret_name }}"
          namespace: "{{ app_namespace }}"
        register: keycloak_database_secret_status

      - when: (keycloak_database_secret_status.resources | length) == 0
        block:
          - name: "Generate random values for Keycloak PostgreSQL username and password"
            set_fact:
              keycloak_database_db_username: "user-{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=4') }}"
              keycloak_database_db_password: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=16') }}"

          - name: "Encode Keycloak PostgreSQL username and password"
            set_fact:
              keycloak_database_db_username_b64: "{{ keycloak_database_db_username | b64encode }}"
              keycloak_database_db_password_b64: "{{ keycloak_database_db_password | b64encode }}"

          - name: "Setup Keycloak PostgreSQL Secret"
            k8s:
              state: present
              definition: "{{ lookup('template', 'secret-keycloak-postgresql.yml.j2') }}"

      - name: "Setup Keycloak PostgreSQL Service"
        k8s:
          state: present
          definition: "{{ lookup('template', 'service-keycloak-postgresql.yml.j2') }}"

      - name: "Setup Keycloak PostgreSQL Deployment"
        k8s:
          state: present
          definition: "{{ lookup('template', 'deployment-keycloak-postgresql.yml.j2') }}"

      - name: "Check if Keycloak SSO Secret exists already so we don't update it"
        k8s_info:
          api_version: v1
          kind: Secret
          name: "{{ keycloak_secret_name }}"
          namespace: "{{ app_namespace }}"
        register: keycloak_secret_status

      - when: (keycloak_secret_status.resources | length) == 0
        block:
          - name: "Generate random values for Keycloak PostgreSQL and SSO username and password"
            set_fact:
              keycloak_database_db_username: "user-{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=4') }}"
              keycloak_database_db_password: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=16') }}"
              keycloak_admin_password: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=16') }}"
              keycloak_hub_client_secret: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=32') }}"

          - name: "Encode Keycloak PostgreSQL and SSO username and password"
            set_fact:
              keycloak_database_db_username_b64: "{{ keycloak_database_db_username | b64encode }}"
              keycloak_database_db_password_b64: "{{ keycloak_database_db_password | b64encode }}"
              keycloak_admin_password_b64: "{{ keycloak_admin_password | b64encode }}"
              keycloak_hub_client_secret_b64: "{{ keycloak_hub_client_secret | b64encode }}"

          - name: "Setup Keycloak SSO Secret"
            k8s:
              state: present
              definition: "{{ lookup('template', 'secret-keycloak-sso.yml.j2') }}"

      - name: "Setup Keycloak SSO ConfigMap"
        k8s:
          state: present
          definition: "{{ lookup('template', 'configmap-keycloak-sso.yml.j2') }}"

      - name: "Setup Keycloak SSO Service"
        k8s:
          state: present
          definition: "{{ lookup('template', 'service-keycloak-sso.yml.j2') }}"

      - name: "Setup Keycloak SSO Deployment"
        k8s:
          state: present
          definition: "{{ lookup('template', 'deployment-keycloak-sso.yml.j2') }}"

  - name: "Setup Tackle Hub API Database PersistentVolumeClaim"
    k8s:
      state: present
      definition: "{{ lookup('template', 'persistentvolumeclaim-hub-database.yml.j2') }}"

  - name: "Setup Tackle Hub API Bucket PersistentVolumeClaim"
    k8s:
      state: present
      definition: "{{ lookup('template', 'persistentvolumeclaim-hub-bucket.yml.j2') }}"

  - name: "Setup Tackle Hub Seed ConfigMap"
    k8s:
      state: present
      definition: "{{ lookup('template', 'configmap-hub-seed.yml.j2') }}"

  - name: "Check if Tackle Hub Secret exists already so we don't update it"
    k8s_info:
      api_version: v1
      kind: Secret
      name: "{{ hub_secret_name }}"
      namespace: "{{ app_namespace }}"
    register: hub_secret_status

  - when: (hub_secret_status.resources | length) == 0
    block:
      - name: "Generate Tackle Hub random AES passphrase"
        set_fact:
          hub_aes_passphrase: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=32') }}"

      - name: "Encode Tackle Hub AES passphrase"
        set_fact:
          hub_aes_passphrase_b64: "{{ hub_aes_passphrase | b64encode }}"

      - name: "Generate Tackle Hub addon token"
        set_fact:
          hub_addon_token: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=32') }}"

      - name: "Encode Tackle Hub addon token"
        set_fact:
          hub_addon_token_b64: "{{ hub_addon_token | b64encode }}"

      - name: "Setup Tackle Hub Secret"
        k8s:
          state: present
          definition: "{{ lookup('template', 'secret-hub.yml.j2') }}"

  - name: "Setup Tackle Hub API Service"
    k8s:
      state: present
      definition: "{{ lookup('template', 'service-hub.yml.j2') }}"

  - name: "Setup Tackle Hub API Deployment"
    k8s:
      state: present
      definition: "{{ lookup('template', 'deployment-hub.yml.j2') }}"

  - name: "Setup PathFinder PostgreSQL PersistentVolume"
    k8s:
      state: present
      definition: "{{ lookup('template', 'persistentvolumeclaim-pathfinder-postgresql.yml.j2') }}"

  - name: "Check if PathFinder PostgreSQL Secret exists already so we don't update it"
    k8s_info:
      api_version: v1
      kind: Secret
      name: "{{ pathfinder_database_secret_name }}"
      namespace: "{{ app_namespace }}"
    register: pathfinder_database_secret_status

  - when: (pathfinder_database_secret_status.resources | length) == 0
    block:
      - name: "Generate random values for PathFinder PostgreSQL username and password"
        set_fact:
          pathfinder_database_db_username: "user-{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=4') }}"
          pathfinder_database_db_password: "{{ lookup('password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=16') }}"

      - name: "Encode PathFinder PostgreSQL username and password"
        set_fact:
          pathfinder_database_db_username_b64: "{{ pathfinder_database_db_username | b64encode }}"
          pathfinder_database_db_password_b64: "{{ pathfinder_database_db_password | b64encode }}"

      - name: "Setup PathFinder PostgreSQL Secret"
        k8s:
          state: present
          definition: "{{ lookup('template', 'secret-pathfinder-postgresql.yml.j2') }}"

  - name: "Setup PathFinder PostgreSQL Service"
    k8s:
      state: present
      definition: "{{ lookup('template', 'service-pathfinder-postgresql.yml.j2') }}"

  - name: "Setup PathFinder PostgreSQL Deployment"
    k8s:
      state: present
      definition: "{{ lookup('template', 'deployment-pathfinder-postgresql.yml.j2') }}"

  - name: "Setup PathFinder Service"
    k8s:
      state: present
      definition: "{{ lookup('template', 'service-pathfinder.yml.j2') }}"

  - name: "Setup PathFinder Deployment"
    k8s:
      state: present
      definition: "{{ lookup('template', 'deployment-pathfinder.yml.j2') }}"

  - when: feature_ui_enabled|bool
    block:
      - name: "Setup Tackle UI Service"
        k8s:
          state: present
          definition: "{{ lookup('template', 'service-ui.yml.j2') }}"

      - name: "Setup Tackle UI Deployment"
        k8s:
          state: present
          definition: "{{ lookup('template', 'deployment-ui.yml.j2') }}"

      - when: not openshift_cluster|bool
        k8s:
          state: present
          definition: "{{ lookup('template', 'ingress-ui.yml.j2') }}"

      - when: openshift_cluster|bool
        k8s:
          state: present
          definition: "{{ lookup('template', 'route-ui.yml.j2') }}"

  - name: "Setup Windup Addon PersistentVolumeClaim"
    k8s:
      state: present
      definition: "{{ lookup('template', 'persistentvolumeclaim-addon-windup.yml.j2') }}"

  - name: "Create Windup Addon CR"
    k8s:
      state: present
      definition: "{{ lookup('template', 'customresource-addon-windup.yml.j2') }}"
